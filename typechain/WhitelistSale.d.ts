/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WhitelistSaleInterface extends ethers.utils.Interface {
  functions: {
    "THIRTY_DAYS_IN_SECONDS()": FunctionFragment;
    "addToWhitelist(address[])": FunctionFragment;
    "addressToUserInfo(address)": FunctionFragment;
    "busd()": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "cliffMonths()": FunctionFragment;
    "igoTimestamp()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "maxMhtAmount()": FunctionFragment;
    "mht()": FunctionFragment;
    "mhtOwner()": FunctionFragment;
    "mhtToBusd()": FunctionFragment;
    "minMhtAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeFromWhitelist(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setIgoTimestamp(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockAtIGOPercent()": FunctionFragment;
    "unpause()": FunctionFragment;
    "vestingPeriodMonths()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "THIRTY_DAYS_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToUserInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cliffMonths",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "igoTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMhtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mht", values?: undefined): string;
  encodeFunctionData(functionFragment: "mhtOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "mhtToBusd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minMhtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIgoTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockAtIGOPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestingPeriodMonths",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "THIRTY_DAYS_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliffMonths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "igoTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMhtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mht", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mhtOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mhtToBusd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minMhtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIgoTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockAtIGOPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingPeriodMonths",
    data: BytesLike
  ): Result;

  events: {
    "AddedToWhitelist(address)": EventFragment;
    "Claimed(address,uint256,uint256)": EventFragment;
    "IGO(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RemovedFromWhitelist(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IGO"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AddedToWhitelistEvent = TypedEvent<[string] & { wallet: string }>;

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    wallet: string;
    monthIndex: BigNumber;
    value: BigNumber;
  }
>;

export type IGOEvent = TypedEvent<[BigNumber] & { timestamp: BigNumber }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RemovedFromWhitelistEvent = TypedEvent<
  [string] & { wallet: string }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class WhitelistSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WhitelistSaleInterface;

  functions: {
    THIRTY_DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToWhitelist(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressToUserInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalTokens: BigNumber;
        remainingTokens: BigNumber;
        lastClaimMonthIndex: BigNumber;
      }
    >;

    busd(overrides?: CallOverrides): Promise<[string]>;

    buy(
      _mhtAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cliffMonths(overrides?: CallOverrides): Promise<[BigNumber]>;

    igoTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    isWhitelisted(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxMhtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mht(overrides?: CallOverrides): Promise<[string]>;

    mhtOwner(overrides?: CallOverrides): Promise<[string]>;

    mhtToBusd(overrides?: CallOverrides): Promise<[BigNumber]>;

    minMhtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeFromWhitelist(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIgoTimestamp(
      _igoTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockAtIGOPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingPeriodMonths(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  THIRTY_DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  addToWhitelist(
    _buyers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressToUserInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalTokens: BigNumber;
      remainingTokens: BigNumber;
      lastClaimMonthIndex: BigNumber;
    }
  >;

  busd(overrides?: CallOverrides): Promise<string>;

  buy(
    _mhtAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cliffMonths(overrides?: CallOverrides): Promise<BigNumber>;

  igoTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  isWhitelisted(wallet: string, overrides?: CallOverrides): Promise<boolean>;

  maxMhtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mht(overrides?: CallOverrides): Promise<string>;

  mhtOwner(overrides?: CallOverrides): Promise<string>;

  mhtToBusd(overrides?: CallOverrides): Promise<BigNumber>;

  minMhtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeFromWhitelist(
    _buyers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIgoTimestamp(
    _igoTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockAtIGOPercent(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingPeriodMonths(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    THIRTY_DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(_buyers: string[], overrides?: CallOverrides): Promise<void>;

    addressToUserInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalTokens: BigNumber;
        remainingTokens: BigNumber;
        lastClaimMonthIndex: BigNumber;
      }
    >;

    busd(overrides?: CallOverrides): Promise<string>;

    buy(_mhtAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    cliffMonths(overrides?: CallOverrides): Promise<BigNumber>;

    igoTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(wallet: string, overrides?: CallOverrides): Promise<boolean>;

    maxMhtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mht(overrides?: CallOverrides): Promise<string>;

    mhtOwner(overrides?: CallOverrides): Promise<string>;

    mhtToBusd(overrides?: CallOverrides): Promise<BigNumber>;

    minMhtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeFromWhitelist(
      _buyers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setIgoTimestamp(
      _igoTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockAtIGOPercent(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vestingPeriodMonths(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddedToWhitelist(address)"(
      wallet?: null
    ): TypedEventFilter<[string], { wallet: string }>;

    AddedToWhitelist(
      wallet?: null
    ): TypedEventFilter<[string], { wallet: string }>;

    "Claimed(address,uint256,uint256)"(
      wallet?: string | null,
      monthIndex?: BigNumberish | null,
      value?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { wallet: string; monthIndex: BigNumber; value: BigNumber }
    >;

    Claimed(
      wallet?: string | null,
      monthIndex?: BigNumberish | null,
      value?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { wallet: string; monthIndex: BigNumber; value: BigNumber }
    >;

    "IGO(uint256)"(
      timestamp?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { timestamp: BigNumber }>;

    IGO(
      timestamp?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { timestamp: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RemovedFromWhitelist(address)"(
      wallet?: null
    ): TypedEventFilter<[string], { wallet: string }>;

    RemovedFromWhitelist(
      wallet?: null
    ): TypedEventFilter<[string], { wallet: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    THIRTY_DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressToUserInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    busd(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _mhtAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cliffMonths(overrides?: CallOverrides): Promise<BigNumber>;

    igoTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMhtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mht(overrides?: CallOverrides): Promise<BigNumber>;

    mhtOwner(overrides?: CallOverrides): Promise<BigNumber>;

    mhtToBusd(overrides?: CallOverrides): Promise<BigNumber>;

    minMhtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIgoTimestamp(
      _igoTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockAtIGOPercent(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingPeriodMonths(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    THIRTY_DAYS_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressToUserInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    busd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _mhtAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cliffMonths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    igoTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMhtAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mht(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mhtOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mhtToBusd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minMhtAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIgoTimestamp(
      _igoTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockAtIGOPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingPeriodMonths(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
